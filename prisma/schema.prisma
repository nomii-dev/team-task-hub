// Prisma schema for Team Task-Hub
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - stores user account information
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Hashed password for credentials login
  image         String?   // Profile image URL
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  teamMembers   TeamMember[]
  assignedTasks Task[]       @relation("TaskAssignee")
  createdTasks  Task[]       @relation("TaskCreator")

  @@map("users")
}

// NextAuth Account model - for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Team model - represents a team/workspace
model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members TeamMember[]
  boards  Board[]

  @@map("teams")
}

// TeamMember model - junction table with role information
model TeamMember {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

// Role enum - defines team member permissions
enum Role {
  ADMIN  // Can manage team, boards, and members
  MEMBER // Can view and edit tasks
}

// Board model - represents a task board (like Kanban)
model Board {
  id        String   @id @default(cuid())
  name      String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team  Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("boards")
}

// Task model - represents individual tasks on a board
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  status      Status    @default(TODO)
  position    Int       @default(0) // For ordering within a column
  dueDate     DateTime?
  boardId     String
  assigneeId  String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  board     Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assignee  User?  @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy User   @relation("TaskCreator", fields: [createdById], references: [id])

  @@map("tasks")
}

// Status enum - task status/column
enum Status {
  TODO
  IN_PROGRESS
  DONE
}

// Verification Token for NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
